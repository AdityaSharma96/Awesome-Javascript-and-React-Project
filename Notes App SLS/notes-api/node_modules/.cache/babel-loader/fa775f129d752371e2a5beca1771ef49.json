{"ast":null,"code":"import \"source-map-support/register\";\nimport * as uuid from \"uuid\";\nimport AWS from \"aws-sdk\";\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nexport function main(event, context, callback) {\n  // Request body is passed in as a JSON encoded string in 'event.body'\n  const data = JSON.parse(event.body);\n  const params = {\n    TableName: process.env.tableName,\n    // 'Item' contains the attributes of the item to be created\n    // - 'userId': user identities are federated through the\n    // Cognito Identity Pool, we will use the identity id\n    // as the user id of the authenticated user\n    // - 'noteId': a unique uuid\n    // - 'content': parsed from request body\n    // - 'attachment': parsed from request body\n    // - 'createdAt': current Unix timestamp\n    Item: {\n      userId: event.requestContext.identity.cognitoIdentityId,\n      noteId: uuid.v1(),\n      content: data.content,\n      attachment: data.attachment,\n      createdAt: Date.now()\n    }\n  };\n  dynamoDb.put(params, (error, data) => {\n    // Set response headers to enable CORS (Cross-Origin Resource Sharing)\n    const headers = {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Credentials\": true\n    }; // Return status code 500 on error\n\n    if (error) {\n      const response = {\n        statusCode: 500,\n        headers: headers,\n        body: JSON.stringify({\n          status: false\n        })\n      };\n      callback(null, response);\n      return;\n    } // Return status code 200 and the newly created item\n\n\n    const response = {\n      statusCode: 200,\n      headers: headers,\n      body: JSON.stringify(params.Item)\n    };\n    callback(null, response);\n  });\n}","map":{"version":3,"sources":["/home/yash/Documents/notes-app-api/create.js"],"names":["uuid","AWS","dynamoDb","DynamoDB","DocumentClient","main","event","context","callback","data","JSON","parse","body","params","TableName","process","env","tableName","Item","userId","requestContext","identity","cognitoIdentityId","noteId","v1","content","attachment","createdAt","Date","now","put","error","headers","response","statusCode","stringify","status"],"mappings":";AAAA,OAAO,KAAKA,IAAZ,MAAsB,MAAtB;AACA,OAAOC,GAAP,MAAgB,SAAhB;AACA,MAAMC,QAAQ,GAAG,IAAID,GAAG,CAACE,QAAJ,CAAaC,cAAjB,EAAjB;AACA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqBC,OAArB,EAA8BC,QAA9B,EAAwC;AAC/C;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWL,KAAK,CAACM,IAAjB,CAAb;AACA,QAAMC,MAAM,GAAG;AACfC,IAAAA,SAAS,EAAEC,OAAO,CAACC,GAAR,CAAYC,SADR;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,IAAI,EAAE;AACFC,MAAAA,MAAM,EACNb,KAAK,CAACc,cAAN,CAAqBC,QAArB,CAA8BC,iBAF5B;AAGFC,MAAAA,MAAM,EAAEvB,IAAI,CAACwB,EAAL,EAHN;AAIFC,MAAAA,OAAO,EAAEhB,IAAI,CAACgB,OAJZ;AAKFC,MAAAA,UAAU,EAAEjB,IAAI,CAACiB,UALf;AAMFC,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AANT;AAVS,GAAf;AAmBA3B,EAAAA,QAAQ,CAAC4B,GAAT,CAAajB,MAAb,EAAqB,CAACkB,KAAD,EAAQtB,IAAR,KAAiB;AACtC;AACA,UAAMuB,OAAO,GAAG;AAChB,qCAA+B,GADf;AAEhB,0CAAoC;AAFpB,KAAhB,CAFsC,CAOtC;;AACA,QAAID,KAAJ,EAAW;AACP,YAAME,QAAQ,GAAG;AACjBC,QAAAA,UAAU,EAAE,GADK;AAEjBF,QAAAA,OAAO,EAAEA,OAFQ;AAGjBpB,QAAAA,IAAI,EAAEF,IAAI,CAACyB,SAAL,CAAe;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAf;AAHW,OAAjB;AAKA5B,MAAAA,QAAQ,CAAC,IAAD,EAAOyB,QAAP,CAAR;AACA;AACC,KAhBiC,CAiBlC;;;AACA,UAAMA,QAAQ,GAAG;AACjBC,MAAAA,UAAU,EAAE,GADK;AAEjBF,MAAAA,OAAO,EAAEA,OAFQ;AAGjBpB,MAAAA,IAAI,EAAEF,IAAI,CAACyB,SAAL,CAAetB,MAAM,CAACK,IAAtB;AAHW,KAAjB;AAKAV,IAAAA,QAAQ,CAAC,IAAD,EAAOyB,QAAP,CAAR;AACC,GAxBL;AAyBK","sourcesContent":["import * as uuid from \"uuid\";\nimport AWS from \"aws-sdk\";\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nexport function main(event, context, callback) {\n// Request body is passed in as a JSON encoded string in 'event.body'\nconst data = JSON.parse(event.body);\nconst params = {\nTableName: process.env.tableName,\n// 'Item' contains the attributes of the item to be created\n// - 'userId': user identities are federated through the\n// Cognito Identity Pool, we will use the identity id\n// as the user id of the authenticated user\n// - 'noteId': a unique uuid\n// - 'content': parsed from request body\n// - 'attachment': parsed from request body\n// - 'createdAt': current Unix timestamp\nItem: {\n    userId:\n    event.requestContext.identity.cognitoIdentityId,\n    noteId: uuid.v1(),\n    content: data.content,\n    attachment: data.attachment,\n    createdAt: Date.now()\n}\n};\ndynamoDb.put(params, (error, data) => {\n// Set response headers to enable CORS (Cross-Origin Resource Sharing)\nconst headers = {\n\"Access-Control-Allow-Origin\": \"*\",\n\"Access-Control-Allow-Credentials\": true\n};\n\n// Return status code 500 on error\nif (error) {\n    const response = {\n    statusCode: 500,\n    headers: headers,\n    body: JSON.stringify({ status: false })\n    };\n    callback(null, response);\n    return;\n    }\n    // Return status code 200 and the newly created item\n    const response = {\n    statusCode: 200,\n    headers: headers,\n    body: JSON.stringify(params.Item)\n    };\n    callback(null, response);\n    });\n    }"]},"metadata":{},"sourceType":"module"}